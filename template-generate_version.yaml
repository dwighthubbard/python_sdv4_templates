namespace: python
name: generate_version
description: Package the application as an sdist package
version: 1.0.0
maintainer: python-devel@oath.com
config:
    image: quay.io/pypa/manylinux2010_x86_64
    # image: ubuntu:19.04
    # image: alpine
    environment:
        BASE_PYTHON: /opt/python/cp37-cp37m/bin/python3
        GIT_SHALLOW_CLONE: false
        LANG: en_US.UTF-8
    steps:
    -   begin: echo "Starting ${SD_TEMPLATE_FULLNAME}"
    -   motd: |
            cat << EOF
            This step will generate a new package verrsion and make it available in the CI Pipeline metadata
            EOF
    -   display_environment: printenv|sort
    -   init_os: |
            if [ ! -e "$BASE_PYTHON" ]; then
                if [ -e "/usr/bin/apt-get" ]; then
                    echo "Updating the apt package list"
                    apt-get update
                    apt-get install -y python3 python3-venv python3-pip
                fi
                if [ -e "/usr/bin/apk" ]; then
                    apk --update add python py-pip openssl ca-certificates
                fi
                if [ "$BASE_PYTHON" = "" ]; then
                    BASE_PYTHON="`which python3`"
                fi
            fi
    -   setup_environment: |
            export PATH=/opt/python/cp37-cp37m/bin:/opt/python/cp36-cp36m/bin:/opt/python/cp27-cp27m/bin:$PATH
            export BINDIR="`dirname ${BASE_PYTHON}`"
            if [ "$BINDIR" != "" ]; then
                export PATH="${BINDIR}:${PATH}"
            fi
    -   generate_version: |
            $BASE_PYTHON << EOF
            from configparser import ConfigParser
            import os
            import subprocess
            import sys
            parser = ConfigParser()
            with open('setup.cfg') as fh:
                parser.read_file(fh)
            version = parser.get('metadata', 'version', fallback=None)
            if not version:
                print('Unable to parse a version from the setup.cfg metadata section', file=sys.stderr)
                sys.exit(1)
            version_split = version.split('.')
            version_split[-1] = os.environ['SD_BUILD_ID']
            version = '.'.join(version_split)
            print(f'New version: {version}')
            subprocess.check_call(['meta', 'set', 'package.version', version]) 
            EOF
    -   disable_sonarqube: rm sonar-project.properties || true  
    -   end: echo "Ending ${SD_TEMPLATE_FULLNAME}"
