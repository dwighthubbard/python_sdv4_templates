namespace: python
name: validate_pypi_package
description: Run tests against the package published to the package repository
images:
    manylinux2010: quay.io/pypa/manylinux2010_x86_64
    ubuntu: ubuntu:latest
version: 2019.522.02403
maintainer: 54983+dwighthubbard@users.noreply.github.com
config:
    image: manylinux2010
    environment:
        BASE_PYTHON: /opt/python/cp37-cp37m/bin/python3.7
        GIT_SHALLOW_CLONE: false
        LANG: en_US.UTF-8
        PYPI_INDEX_URL: https://pypi.org/simple
        PYTEST_ARGS: ''
        UPLOAD_TIMEOUT_SECS: 15
    settings: {}
    steps:
    -   begin: echo "Starting ${SD_TEMPLATE_FULLNAME}"
    -   motd: |
            cat << EOF
            Run tests against the package published to the package repository
            EOF
    -   display_environment: printenv|sort
    -   init_os: |
            PYTHON=`basename $BASE_PYTHON`
            if [ -e "/usr/bin/apt-get" ]; then
                echo "Updating the apt package list"
                apt-get update
            fi
            if [ ! -e "$BASE_PYTHON" ]; then
                if [ -e "/usr/bin/apt-get" ]; then
                    echo "Found apt-get, configuring for debian distro"
                    apt-get install -y python3 python3-venv python3-pip
                    if [ "$PYTHON" != "" ]; then
                        apt-get install -y ${PYTHON} ${PYTHON}-venv ${PYTHON}-pip
                    fi
                fi
                BASE_PYTHON="`which python3`"
            fi
    -   setup_environment: |
            export BINDIR="`dirname ${BASE_PYTHON}`"
            export PATH="${BINDIR}:/opt/python/bin:${PATH}"
    -   install_pypirun: echo "Code to install pypirun utility goes here"
    -   configure_pip: echo "Add pip configuration commands here"
    -   install_dependencies: echo "OS Dependency install command goes here"
    -   init: echo "Command to initialize screwdriver operations goes here"
    -   update_version: echo "Command to update the package version goes here"
    -   validate_code: |
            $BASE_PYTHON << EOF
            from configparser import ConfigParser
            import datetime, os, shlex, subprocess, sys, tempfile, time
            cwd = os.getcwd()
            pypi_index = os.environ.get('PYPI_INDEX_URL', 'https://pypi.org/simple')
            version = subprocess.check_output(['meta', 'get', 'package.version']).decode(errors='ignore')
            pytest_args = shlex.split(os.environ.get('PYTEST_ARGS', ''))
            test_dir = os.path.join(cwd, 'tests/')
            timeout_secs = int(os.environ.get('UPLOAD_TIMEOUT_SECS', 30))
            parser = ConfigParser()
            parser.read('setup.cfg')
            package_name = parser['metadata']['name']
            try:
                test_requires = [ _.strip() for _ in parser['options.extras_require']['test'].strip().split(os.linesep)]
            except KeyError:
                test_requires = []
            install_requires = [ _.strip() for _ in parser['options']['install_requires'].strip().split(os.linesep)]
            with tempfile.TemporaryDirectory() as tempdir:
                subprocess.check_call([sys.executable, '-m', 'venv', tempdir])
                venv_pip = os.path.join(tempdir, 'bin/pip')
                venv_pytest = os.path.join(tempdir, 'bin/pytest')

                subprocess.check_call([venv_pip, 'install', '-q', 'pytest'])
                if install_requires:
                    print('Installing dependencies from production pypi')
                    subprocess.check_call([venv_pip, 'install', '-q'] + install_requires)
                if test_requires:
                    print('Installing test dependencies from production pypi')
                    subprocess.check_call([venv_pip, 'install', '-q'] + test_requires)
                timeout_time = datetime.datetime.now() + datetime.timedelta(seconds=timeout_secs)
                while datetime.datetime.now() < timeout_time:
                    try:
                        command = [venv_pip, 'install', '-q', '-i', pypi_index, f'{package_name}=={version}']
                        print(f'Trying to install package package using command {" ".join(command)}', flush=True)
                        subprocess.check_call(command)
                        break
                    except subprocess.CalledProcessError:
                        time.sleep(5)
                os.chdir(tempdir)
                print('Installed packages', flush=True)
                subprocess.call([venv_pip, 'freeze'])
                
                command = [venv_pytest]
                if pytest_args:
                    command += pytest_args
                command.append(test_dir)

                print(f'Running test command: {" ".join(command)}')
                rc = 0
                try:
                    subprocess.check_call(command)
                except subprocess.CalledProcessError as error:
                    rc = error.returncode
                os.chdir(cwd)
            sys.exit(rc)
            EOF
    -   store_artifacts: echo "This template does not currently generate artifacts"
    -   end: echo "Ending ${SD_TEMPLATE_FULLNAME}"
