namespace: python
name: package_python
description: Package the application as an sdist package
version: 1.0.1
maintainer: python-devel@oath.com
config:
    image: quay.io/pypa/manylinux2010_x86_64
    # image: ubuntu:19.04
    environment:
        BASE_PYTHON: /opt/python/cp37-cp37m/bin/python3
        GIT_SHALLOW_CLONE: false
        LANG: en_US.UTF-8
        PUBLISH: false
        TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
        PYROMA_MIN_SCORE: 8
        SETUP_ARGS: ''
    secrets:
        - PYPI_USER
        - PYPI_PASSWORD
        - TEST_PYPI_USER
        - TEST_PYPI_PASSWORD
    steps:
    -   begin: echo "Starting ${SD_TEMPLATE_FULLNAME}"
    -   motd: |
            cat << EOF
            This step will run unittests using the tox tool
            EOF
    -   init_os: |
            if [ -e "/usr/bin/apt-get" ]; then
                echo "Updating the apt package list"
                apt-get update
                apt-get install -y python3 python3-venv python3-pip
            fi
    -   setup_environment: |
            export PATH=/opt/python/cp37-cp37m/bin:/opt/python/cp36-cp36m/bin:/opt/python/cp27-cp27m/bin:$PATH
            if [ "$BASE_PYTHON" = "" ]; then
                BASE_PYTHON="`which python3`"
            fi
            export BINDIR="`dirname ${BASE_PYTHON}`"
            if [ "$BINDIR" != "" ]; then
                export PATH="${BINDIR}:${PATH}"
            fi    
    -   environment_keys: |
            $BASE_PYTHON << EOF
            import os
            keys = list(os.environ.keys())
            keys.sort()
            print(', '.join(keys))
            EOF
    -   install_utiliity: |
            $BASE_PYTHON -m pip install setuptools wheel 
            $BASE_PYTHON -m pip install pyroma twine
    -   update_version: |
            $BASE_PYTHON << EOF
            from configparser import ConfigParser
            import os
            import subprocess
            import sys
            
            version = subprocess.check_output(['meta', 'get', 'package.version']).decode(errors='ignore')
            
            if version == 'null':
                print('Unable to fetch package.version from the ci pipeline metadata', flush=True)
                sys.exit(0)
            print(f'Version set to {version}')
            parser = ConfigParser()
            with open('setup.cfg') as fh:
                parser.read_file(fh)
            if 'metadata' in parser.sections():
                version = parser.set('metadata', 'version', version)
                with open('setup.cfg', 'w') as fh:
                    parser.write(fh)
            EOF
    -   package_code: |
            if [ -z "$PACKAGE_DIR"  ]; then
                PACKAGE_DIR="`$BASE_PYTHON setup.py --name`"
            fi
            $BASE_PYTHON setup.py sdist bdist_wheel $SETUP_ARGS
    -   store_package: |
            if [ ! -e "$SD_ARTIFACTS_DIR/packages" ]; then
                mkdir -p "$SD_ARTIFACTS_DIR/packages"
            fi
            cp dist/* "$SD_ARTIFACTS_DIR/packages" 
    -   check_packages: |
            $BASE_PYTHON << EOF
            import os
            import subprocess
            package_dir = f'{os.environ["SD_ARTIFACTS_DIR"]}/packages'
            for package in os.listdir(package_dir):
                if package.endswith('.whl'):
                    continue
                print(f'Checking package {package!r}', flush=True)
                subprocess.check_call(['pyroma', f'--min={os.environ["PYROMA_MIN_SCORE"]}', os.path.join(package_dir, package)])
            EOF
    -   publish_packages: |
            $BASE_PYTHON << EOF
            import os, subprocess, sys
            if os.environ['PUBLISH'].lower() not in ['true', '1', 'on']:
                print('Publish is disabled, skipping publish operation', flush=True)
                sys.exit(0)
            if 'test.pypi.org' in os.environ['TWINE_REPOSITORY_URL']:
                print('Using test.pypi.org endpoint, getting user from TEST_PYPI_USER secret and password from TEST_PYPI_PASSWORD secret', flush=True)
                user = os.environ.get('TEST_PYPI_USER', None)
                password = os.environ.get('TEST_PYPI_PASSWORD', None)
            else:
                print('Using pypi.org endpoint, getting user from PYPI_USER secret and password from PYPI_PASSWORD secret', flush=True)
                user = os.environ.get('PYPI_USER', None)
                password = os.environ.get('PYPI_PASSWORD', None)
            if not user:
                print('Unable to publish to PYPI, user secret is not set', flush=True)
                sys.exit(1)
            if not password:
                print('Unable to publish to PYPI, password secret is not set', flush=True)
                sys.exit(1)
            os.environ['TWINE_USERNAME'] = user
            os.environ['TWINE_PASSWORD'] = password
            bindir = os.path.dirname(sys.executable)
            twine_cmd = os.path.join(bindir, 'twine')
            twine_env = {'TWINE_USERNAME': user, 'TWINE_PASSWORD': password}
            if not os.path.exists(twine_cmd):
                print('The twine command is missing', flush=True)
                sys.exit(1)
            print(f'Publishing to {os.environ["TWINE_REPOSITORY_URL"]} as with user {user}', flush=True)
            for filename in os.listdir('dist'):
                print(f'Uploading {filename}', flush=True)
                command = [twine_cmd, 'upload', '--verbose', os.path.join('dist', filename)]
                print(f'Running: {" ".join(command)}')
                try:
                    subprocess.check_call(command)
                except subprocess.CalledProcessError as error:
                    print(f'Upload of package file {filename!r} failed', flush=True)
                    sys.exit(error.returncode)
            EOF
    -   end: echo "Ending ${SD_TEMPLATE_FULLNAME}"
