namespace: python
name: package_python
description: Package the application as an sdist package
images:
    manylinux2010: quay.io/pypa/manylinux2010_x86_64
    manylinux1_32: quay.io/pypa/manylinux1_i686
    manylinux1_64: quay.io/pypa/manylinux1_x86_64
    ubuntu: ubuntu:latest
version: 1.0.1
maintainer: python-devel@oath.com
config:
    image: manylinux2010
    environment:
        BASE_PYTHON: /opt/python/cp37-cp37m/bin/python3
        GIT_SHALLOW_CLONE: false
        LANG: en_US.UTF-8
        MANYLINUX: True
        PUBLISH: false
        TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
        PYROMA_MIN_SCORE: 8
        PACKAGE_TAG: True
        PACKAGE_TYPES: sdist,wheel
        SETUP_ARGS: ''
    secrets:
        - PYPI_USER
        - PYPI_PASSWORD
        - TEST_PYPI_USER
        - TEST_PYPI_PASSWORD
        - GIT_DEPLOY_KEY
        - GIT_DEPLOY_KEY_PASSPHRASE
    steps:
    -   begin: echo "Starting ${SD_TEMPLATE_FULLNAME}"
    -   motd: |
            cat << EOF
            This job will generate python packages, check them and publish them to a python packaging
            repository.
            EOF
    -   init_os: |
            sd-cmd exec python/python_bootstrap@stable
            source /tmp/python_bootstrap.env
    -   setup_deploy_keys: |
            if [ ! -z "$GIT_DEPLOY_KEY" ]; then
                pypirun screwdrivercd screwdrivercd_ssh_setup
                eval "$(ssh-agent -s)"
                pypirun screwdrivercd screwdrivercd_github_deploykey
            fi
    -   install_dependencies: pypirun screwdrivercd screwdrivercd_install_deps
    -   update_version: pypirun screwdrivercd screwdrivercd_version
    -   install_utility: |
            $BASE_PYTHON -m pip install setuptools 
            $BASE_PYTHON -m pip install wheel auditwheel pyroma twine
    -   package_code: |
            $BASE_PYTHON <<EOF
            import os,shlex,subprocess,sys
            artifacts_dir = os.environ.get('SD_ARTIFACTS_DIR', 'artifacts')
            package_artifacts = os.path.join(artifacts_dir, 'packages')
            wheel_build_dir = os.path.join(artifacts_dir, 'wheelbuild')
            build_log_dir = os.path.join(artifacts_dir, 'logs/build')
            setup_args = shlex.split(os.environ.get('SETUP_ARGS', ''))
            manylinux = os.environ.get('MANYLINUX', 'True').lower() in ['1', 'true', 'on']
            plat = os.environ.get('AUDITWHEEL_PLAT', '')
            package_types = [ _.strip().lower() for _ in os.environ.get('PACKAGE_TYPES', 'sdist,wheel').split(',')]
            package_name = subprocess.check_output([sys.executable, 'setup.py', '--name']).decode(errors='ignore').strip()
            package_dir = os.environ.get('PACKAGE_DIR', package_name)
                     
            os.makedirs(package_artifacts, exist_ok=True)
            os.makedirs(build_log_dir, exist_ok=True)
            os.makedirs(wheel_build_dir, exist_ok=True)
            
            def run_and_log_output(command, logfile):
                with open(logfile, 'wb') as fh:
                    print(f'Running command: {" ".join(command)}', flush=True)
                    try:
                        output = subprocess.check_output(command, stderr=subprocess.STDOUT)
                        fh.write(output)
                    except subprocess.CalledProcessError as error:
                        print(f'Command {command!r} failed', flush=True)
                        if error.stdout:
                            print(error.stdout)
                        raise error
            
            failed = set()
            for package_type in package_types:
                if package_type == 'sdist':
                    print(f'Building sdist package', flush=True)
                    run_and_log_output(command=[sys.executable, 'setup.py', 'sdist'] + setup_args, logfile=f'{build_log_dir}/sdist_build.log')
                    if os.path.exists('dist'):
                        for filename in os.listdir('dist'):
                            print(f'Moving dist/{filename} -> {package_artifacts}/{filename}')
                            os.rename(f'dist/{filename}', f'{package_artifacts}/{filename}')
                elif package_type == 'wheel':
                    print('Building wheel package(s)', flush=True)
                    before = set(os.listdir('dist'))
                    run_and_log_output([sys.executable, 'setup.py', 'bdist_wheel'] + setup_args, logfile=f'{build_log_dir}/wheel_build.log')
                    after = set(os.listdir('dist'))
                    for filename in after - before:
                        if filename.endswith('none-any.whl'):
                            print('Package is generating a pure python wheel, disabling manylinux', flush=True)
                            manylinux = False
                            print(f'Moving dist/{filename} -> {package_artifacts}/{filename}')
                            os.rename(f'dist/{filename}', f'{package_artifacts}/{filename}')
                    if manylinux and plat:
                        print('Generating manylinux wheels', flush=True)
                        for entry in os.listdir('/opt/python'):
                            interpreter_dir = os.path.join('/opt/python', entry)
                            pip_command = f'{interpreter_dir}/bin/pip'
                            if os.path.isdir(interpreter_dir) and os.path.exists(pip_command):
                                print(f'Compiling wheel for the {entry!r} python interpreter', flush=True)
                                try:
                                    run_and_log_output([pip_command, 'wheel', '.', '-w', wheel_build_dir], logfile=f'{build_log_dir}/wheel_build_{entry}.log')
                                except subprocess.CalledProcessError:
                                    failed.add(entry)
                        for wheel in os.listdir(wheel_build_dir):
                            full_wheel_filename = os.path.join(wheel_build_dir, wheel)
                            if not wheel.startswith(package_name + '-'):
                                print(f'Removing dependency wheel {wheel!r}', flush=True)
                                os.remove(full_wheel_filename)
                                continue
                            if wheel.endswith('none-any.whl'):
                                # Not a binary wheel
                                continue
                            print(f'Bundling shared libraries for wheel package {wheel!r}', flush=True)
                            run_and_log_output(['auditwheel', 'repair', full_wheel_filename, '--plat', plat, '-w', wheel_build_dir], logfile=f'{build_log_dir}/wheel_auditwheel_{wheel}.log')
                            os.remove(full_wheel_filename)
                    for filename in os.listdir(wheel_build_dir):
                        print(f'Moving {wheel_build_dir}/{filename} -> {package_artifacts}/{filename}')
                        os.rename(f'{wheel_build_dir}/{filename}', f'{package_artifacts}/{filename}')
                print('', flush=True)
            if failed:
                print(f'Package build failed for {failed}')
            EOF
    -   store_package: echo "storing package"
    -   check_packages: |
            $BASE_PYTHON << EOF
            import os
            import subprocess
            package_dir = f'{os.environ["SD_ARTIFACTS_DIR"]}/packages'
            for package in os.listdir(package_dir):
                if package.endswith('.whl'):
                    continue
                print(f'Checking package {package!r}', flush=True)
                subprocess.check_call(['pyroma', f'--min={os.environ["PYROMA_MIN_SCORE"]}', os.path.join(package_dir, package)])
            EOF
    -   publish_packages: |
            $BASE_PYTHON << EOF
            import os, subprocess, sys
            package_dir = f'{os.environ["SD_ARTIFACTS_DIR"]}/packages'
            if not os.path.exists(package_dir):
               print('Package directory does not exist, no packages to validate', flush=True)
               sys.exit(0)
            if os.environ['PUBLISH'].lower() not in ['true', '1', 'on']:
                print('Publish is disabled, skipping publish operation', flush=True)
                sys.exit(0)
            if 'test.pypi.org' in os.environ['TWINE_REPOSITORY_URL']:
                print('Using test.pypi.org endpoint, getting user from TEST_PYPI_USER secret and password from TEST_PYPI_PASSWORD secret', flush=True)
                user = os.environ.get('TEST_PYPI_USER', None)
                password = os.environ.get('TEST_PYPI_PASSWORD', None)
            else:
                print('Using pypi.org endpoint, getting user from PYPI_USER secret and password from PYPI_PASSWORD secret', flush=True)
                user = os.environ.get('PYPI_USER', None)
                password = os.environ.get('PYPI_PASSWORD', None)
            if not user:
                print('Unable to publish to PYPI, user secret is not set', flush=True)
                sys.exit(1)
            if not password:
                print('Unable to publish to PYPI, password secret is not set', flush=True)
                sys.exit(1)
            os.environ['TWINE_USERNAME'] = user
            os.environ['TWINE_PASSWORD'] = password
            bindir = os.path.dirname(sys.executable)
            twine_cmd = os.path.join(bindir, 'twine')
            twine_env = {'TWINE_USERNAME': user, 'TWINE_PASSWORD': password}
            if not os.path.exists(twine_cmd):
                print('The twine command is missing', flush=True)
                sys.exit(1)
            print(f'Publishing to {os.environ["TWINE_REPOSITORY_URL"]} as with user {user}', flush=True)
            for filename in os.listdir(package_dir):
                print(f'Uploading {filename}', flush=True)
                command = [twine_cmd, 'upload', '--verbose', os.path.join(package_dir, filename)]
                print(f'Running: {" ".join(command)}')
                try:
                    subprocess.check_call(command)
                except subprocess.CalledProcessError as error:
                    print(f'Upload of package file {filename!r} failed', flush=True)
                    sys.exit(error.returncode)
            EOF
    -   tag_release: |
            $BASE_PYTHON << EOF
            import os
            import subprocess
            import sys
            
            if not os.environ.get('GIT_DEPLOY_KEY', ''):
                print('Git deployment key is not present, cannot commit tags to the git repo')
                sys.exit(0)
            if not os.environ.get('PACKAGE_TAG', 'True').lower() in ['1', 'true', 'on']:
                print('Tagging is disabled for this job')
                sys.exit(0)
            version = subprocess.check_output(['meta', 'get', 'package.version']).decode(errors='ignore')
            if version == 'null':
                print('No release version in metadata', flush=True)
                sys.exit(0)
            print('Creating tag', flush=True)
            subprocess.call(['git', 'tag', '-a', version, '-m', f'Adding release {version}'])
            
            print('Pushing the tags')
            try:
                subprocess.call(['git', 'push', '--tags'], timeout=60)
                # subprocess.call(['sd-step', 'exec', 'core/git', 'git push --tags'], timeout=30)
            except subprocess.TimeoutExpired:
                print('Timeout occurred pushing tags to the remote')
                print('Git remotes:')
                os.system('git remote -v')
            except subprocess.CalledProcessError:
                print('Push of git tag failed')
            EOF
    -   publish_delay: sleep 60
    -   end: echo "Ending ${SD_TEMPLATE_FULLNAME}"
