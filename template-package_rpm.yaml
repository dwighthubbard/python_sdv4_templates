namespace: python
name: package_rpm
description: Package the application as a rpm package
images:
    manylinux2010: quay.io/pypa/manylinux2010_x86_64
    manylinux1_32: quay.io/pypa/manylinux1_i686
    manylinux1_64: quay.io/pypa/manylinux1_x86_64
    fedora: fedora:latest
    ubuntu: ubuntu:latest
version: 1.0.1
maintainer: python-devel@oath.com
config:
    image: fedora
    environment:
        BASE_PYTHON: ''
        GIT_SHALLOW_CLONE: false
        LANG: en_US.UTF-8
        PUBLISH: false
        SETUP_ARGS: ''
        PIP_EXTRA_INDEX_URL: https://test.pypi.org/simple
    steps:
    -   begin: echo "Starting ${SD_TEMPLATE_FULLNAME}"
    -   motd: |
            cat << EOF
            This job will generate rpm packages, check them
            repository.
            EOF
    -   init_os: |
            if [ -e "/usr/bin/apt-get" ]; then
                echo "Updating the apt package list"
                apt-get update
                apt-get install -y python3 python3-venv python3-pip
            fi
    -   setup_environment: |
            export PATH=/opt/python/cp37-cp37m/bin:/opt/python/cp36-cp36m/bin:/opt/python/cp27-cp27m/bin:$PATH
            if [ "$AUDITWHEEL_PLAT" != "" ]; then
                export PATH="`ls -1d /opt/python/*|sort -r|while read dir; do echo -n $dir/bin:; done`:$PATH"
            fi
            if [ "$BASE_PYTHON" = "" ]; then
                BASE_PYTHON="`python3 -c "import sys;print(sys.executable)"`"
            fi
            export BINDIR="`dirname ${BASE_PYTHON}`"
            if [ "$BINDIR" != "" ]; then
                export PATH="${BINDIR}:${PATH}"
            fi    
    -   install_rpm_deps: yum install -y rpm-build redhat-rpm-config
    -   install_utility: |
            $BASE_PYTHON -m pip install setuptools 
            $BASE_PYTHON -m pip install wheel invirtualenv
    -   update_version: |
            $BASE_PYTHON << EOF
            from configparser import ConfigParser
            import os
            import subprocess
            import sys
            
            version = subprocess.check_output(['meta', 'get', 'package.version']).decode(errors='ignore')
            if version == 'null':
                print('Unable to fetch package.version from the ci pipeline metadata', flush=True)
                sys.exit(0)
            print(f'Version set to {version}')
            parser = ConfigParser()
            with open('setup.cfg') as fh:
                parser.read_file(fh)
            if 'metadata' in parser.sections():
                version = parser.set('metadata', 'version', version)
                with open('setup.cfg', 'w') as fh:
                    parser.write(fh)
            EOF
    -   package_code: |
            PACKAGE_VERSION=`meta get package.version`
            invirtualenv create_package rpm
            ls -lh *.rpm
    -   store_package: |
            $BASE_PYTHON << EOF
            import os, shutil
            package_dir = f'{os.environ["SD_ARTIFACTS_DIR"]}/package/rpm'
            os.makedirs(package_dir, exist_ok=True)
            for filename in os.listdir('.'):
                if filename.endswith('rpm'):
                    dest = os.path.join(package_dir, filename)
                    print(f'Copying {filename} -> {dest}', flush=True)
                    shutil.copy(filename, dest)
            EOF
    -   check_packages: |
            $BASE_PYTHON << EOF
            import os, subprocess
            package_dir = f'{os.environ["SD_ARTIFACTS_DIR"]}/package/rpm'
            for package in os.listdir(package_dir):
                package = os.path.join(package_dir, package)
                if not package.endswith('.rpm'):
                    continue
                print(f'Installing package {package!r}', flush=True)
                subprocess.check_call(['yum', 'install', '-y', package])
            EOF
    -   publish_packages: echo "Publish functionality is not yet implemented"
    -   disable_sonarqube: rm sonar-project.properties || true  
    -   end: echo "Ending ${SD_TEMPLATE_FULLNAME}"
