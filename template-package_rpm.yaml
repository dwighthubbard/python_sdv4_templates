namespace: python
name: package_rpm
description: Package the application as a rpm package
images:
    manylinux2014: quay.io/pypa/manylinux2014_x86_64
    manylinux2010: quay.io/pypa/manylinux2010_x86_64
    manylinux1_32: quay.io/pypa/manylinux1_i686
    manylinux1_64: quay.io/pypa/manylinux1_x86_64
    fedora: fedora:latest
    ubuntu: ubuntu:latest
version: 1.1.1
maintainer: python-devel@oath.com
config:
    image: fedora
    environment:
        BASE_PYTHON: ''
        GIT_SHALLOW_CLONE: false
        LANG: en_US.UTF-8
        PUBLISH: false
        SETUP_ARGS: ''
        PIP_EXTRA_INDEX_URL: https://test.pypi.org/simple
    steps:
    -   begin: echo "Starting ${SD_TEMPLATE_FULLNAME}"
    -   motd: |
            cat << EOF
            This job will generate rpm packages, check them
            repository.
            EOF
    -   init_os: |
            sd-cmd exec python/python_bootstrap@stable
            source /tmp/python_bootstrap.env
    -   install_dependencies: $BASE_PYTHON -m screwdrivercd.installdeps
    -   update_version: $BASE_PYTHON -m screwdrivercd.version
    -   install_rpm_deps: yum install -y rpm-build redhat-rpm-config
    -   install_utility: |
            $BASE_PYTHON -m pip install setuptools 
            $BASE_PYTHON -m pip install wheel invirtualenv
    -   store_spec: |
            mkdir -p $SD_ARTIFACTS_DIR/config/rpm
            invirtualenv create_package_config rpm --outfile $SD_ARTIFACTS_DIR/config/rpm/rpmpackage.spec
    -   package_code: |
            PACKAGE_VERSION=`meta get package.version`
            invirtualenv create_package rpm
            ls -lh *.rpm
    -   store_package: |
            $BASE_PYTHON << EOF
            import os, shutil
            package_dir = f'{os.environ["SD_ARTIFACTS_DIR"]}/package/rpm'
            os.makedirs(package_dir, exist_ok=True)
            for filename in os.listdir('.'):
                if filename.endswith('rpm'):
                    dest = os.path.join(package_dir, filename)
                    print(f'Copying {filename} -> {dest}', flush=True)
                    shutil.copy(filename, dest)
            EOF
    -   check_packages: |
            $BASE_PYTHON << EOF
            import os, subprocess
            package_dir = f'{os.environ["SD_ARTIFACTS_DIR"]}/package/rpm'
            for package in os.listdir(package_dir):
                package = os.path.join(package_dir, package)
                if not package.endswith('.rpm'):
                    continue
                print(f'Installing package {package!r}', flush=True)
                subprocess.check_call(['yum', 'install', '-y', package])
            EOF
    -   publish_packages: echo "Publish functionality is not yet implemented"
    -   disable_sonarqube: rm sonar-project.properties || true  
    -   end: echo "Ending ${SD_TEMPLATE_FULLNAME}"
