namespace: python
name: package_python_sdist
description: Package the application as an sdist package
long_description = file:README.md
long_description_content_type = text/markdown
version: 1.0.0
maintainer: python-devel@oath.com
config:
    # image: quay.io/pypa/manylinux2010_x86_64
    image: ubuntu:19.04
    environment:
        BASE_PYTHON: ''
        GIT_SHALLOW_CLONE: false
        LANG: en_US.UTF-8
        SETUP_ARGS: ''
    steps:
    -   begin: echo "Starting ${SD_TEMPLATE_FULLNAME}"
    -   motd: |
            cat << EOF
            This step will run unittests using the tox tool
            EOF
    -   display_environment: printenv|sort
    -   init_os: |
            if [ -e "/usr/bin/apt-get" ]; then
                echo "Updating the apt package list"
                apt-get update
                apt-get install -y python3 python3-venv python3-pip
            fi
    -   setup_environment: |
            export PATH=/opt/python/cp37-cp37m/bin:/opt/python/cp36-cp36m/bin:/opt/python/cp27-cp27m/bin:$PATH
            if [ "$BASE_PYTHON" = "" ]; then
                BASE_PYTHON="`which python3`"
            fi
            export BINDIR="`dirname ${BASE_PYTHON}`"
            if [ "$BINDIR" != "" ]; then
                export PATH="${BINDIR}:${PATH}"
            fi    
    -   install_utiliity: |
            if [ ! -e "$BINDIR/wheel" ]; then
                $BASE_PYTHON -m pip install setuptools wheel pyroma
            fi
    -   update_version: |
            $BASE_PYTHON << EOF
            from configparser import ConfigParser
            import os
            import subprocess
            import sys
            
            version = subprocess.check_output(['meta', 'get', 'package.version']).decode(errors='ignore')
            
            parser = ConfigParser()
            with open('setup.cfg') as fh:
                parser.read_file(fh)
            if 'metadata' in parser.sections():
                version = parser.set('metadata', 'version', version)
                with open('setup.cfg', 'w') as fh:
                    parser.write(fh)
            EOF
    -   package_code: |
            if [ -z "$PACKAGE_DIR"  ]; then
                PACKAGE_DIR="`$BASE_PYTHON setup.py --name`"
            fi
            $BASE_PYTHON setup.py sdist bdist_wheel $SETUP_ARGS
    -   store_package: |
            if [ ! -e "$SD_ARTIFACTS_DIR/packages" ]; then
                mkdir -p "$SD_ARTIFACTS_DIR/packages"
            fi
            cp dist/* "$SD_ARTIFACTS_DIR/packages" 
    -   check_packages: |
            $BASE_PYTHON << EOF
            import os
            import subprocess
            package_dir = f'{os.environ["SD_ARTIFACTS_DIR"]}/packages'
            for package in os.listdir(package_dir):
                print(f'Checking package {package!r}', flush=True)
                subprocess.check_call(['pyroma', os.path.join(package_dir, package)])
            EOF
    -   end: echo "Ending ${SD_TEMPLATE_FULLNAME}"
