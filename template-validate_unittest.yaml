namespace: python
name: validate_unittest
description: Run the unittest using the tox tool
version: 1.0.0
maintainer: python-devel@oath.com
images:
    manylinux2014: quay.io/pypa/manylinux2014_x86_64
    manylinux2010: quay.io/pypa/manylinux2010_x86_64
    manylinux1_32: quay.io/pypa/manylinux1_i686
    manylinux1_64: quay.io/pypa/manylinux1_x86_64
    ubuntu: ubuntu:latest
config:
    image: manylinux2014
    environment:
        BASE_PYTHON: /opt/python/cp311-cp311/python3
        GIT_SHALLOW_CLONE: false
        LANG: en_US.UTF-8
        TEST_RUNNER: pytest
        TOX_ARGS: ''
        TOX_ENVLIST: py38,py39,py310,py311
    secrets:
        - CODECOV_TOKEN
        - COVERALLS_REPO_TOKEN
    steps:
    -   begin: echo "Starting ${SD_TEMPLATE_FULLNAME}"
    -   motd: |
            cat << EOF
            This step will run unittests using the tox tool
            EOF
    -   init_os: |
            sd-cmd exec python/python_bootstrap@stable
            source /tmp/python_bootstrap.env
    -   install_dependencies: screwdrivercd_install_deps
    -   update_version: screwdrivercd_version
    -   validate_code: screwdrivercd_validate_unittest
    -   add_test_metadata: |
            $BASE_PYTHON -m pip install junitparser
            $BASE_PYTHON << EOF
            import json, os,subprocess, sys
            from junitparser import JUnitXml

            testdir = os.path.join(os.environ["SD_ARTIFACTS_DIR"], 'test')
            if not os.path.exists(testdir):
                print('No test metadata files to parse', flush=True)
                sys.exit(0)
 
            test_failed = 0
            test_run = 0
            test_ok = 0

            for filename in os.listdir(testdir):
                if 'test' not in filename:
                    continue
                    
                if not filename.endswith('.xml'):
                    continue
                    
                xml = JUnitXml.fromfile(os.path.join(testdir, filename))
                test_failed += xml.errors + xml.failures
                test_run += xml.tests - xml.skipped

            if test_run == 0:
                print('No tests run, not setting metadata', flush=True)
                sys.exit(0)
                
            test_ok = test_run - test_failed
            test_summary = f'{test_ok}/{test_run}'
            print(f'meta set tests.results {test_summary}')
            subprocess.call(['meta', 'set', 'tests.results', test_summary])
            status = {
                "status": "SUCCESS",
                "message": f"{test_summary} tests passed"
            }
            job_name = os.environ.get('SD_JOB_NAME', None)
            if job_name:
                job_name = job_name.split(':')[-1]
                print(f'meta set meta.status.{job_name}', json.dumps(status))
                subprocess.call(['meta', 'set', f'meta.status.{job_name}', json.dumps(status)])
            EOF
    -   add_coverage_metadata: |
            $BASE_PYTHON -m pip install coverage
            $BASE_PYTHON << EOF
            import os, subprocess, sys
            if not os.path.exists('.coverage'):
                print('No coverage data found', flush=True)
                sys.exit(0)
            try:
                output = subprocess.check_output(['coverage', 'report'])
            except (subprocess.CalledProcessError, FileNotFoundError):
                print('Not able to access coverage report, not updating coverage', flush=True)
                sys.exit(0)
            lines = output.decode(errors='ignore').split(os.linesep)
            
            for line in [ _.strip() for _ in lines]:
                if line.startswith('TOTAL'):
                    coverage_percentage = line.split()[-1].replace('%', '')
                    print(f'meta set tests.coverage {float(coverage_percentage)}')
                    subprocess.call(['meta', 'set', 'tests.coverage', str(float(coverage_percentage))])
            EOF
    -   codecov: |
            if [ "$CODECOV_TOKEN" != "" ]; then
                $BASE_PYTHON -m pip install codecov .[test]
                
                if [ -z $SD_PULL_REQUEST ]; then
                    codecov -c ${SD_BUILD_SHA} --build ${SD_BUILD_ID}
                else
                    codecov --pr ${SD_PULL_REQUEST} -c ${SD_BUILD_SHA} --build ${SD_BUILD_ID}
                fi
            fi
    -   end: echo "Ending ${SD_TEMPLATE_FULLNAME}"
